"""
    get_impl_function_name(func_name)

Get the name of the implementation function for a given function name.
Generally, this is of the format `impl_<func_name>` but in some cases
(e.g. `Base.:+`) this would not work. This is currently not implemented.
"""
function get_impl_function_name(func_name)
    if func_name isa Expr
        return error("TODO: get the implementation function name for cases like `Base.:+`")
    end

    return Symbol("impl_", func_name)
end

"""
    rewritetarget(func::Expr)

Mark a function to be used in the egraph optimizations. This creates a wrapper
function with the original name and a separate implementation function with a
name generated by `get_impl_function_name`.
"""
macro rewritetarget(func::Expr)
    # If a return type isn't included in the function, the name of the function
    # is nested one additional level. We need the return type to be explicitly
    # stated as that information is lost when using the `Base.compilerbarrier`.
    if func.args[begin].args[begin] isa Symbol
        return error("Please add a return type to the function")
    end

    # Full signature of function including name and return type
    signature = func.args[begin]
    # Signature of function without return type
    signature_noret = signature.args[begin]

    func_name = signature_noret.args[begin]
    args = signature_noret.args[2:end]
    ret_type = signature.args[2]

    # Change the name of the implementation function
    func_name_impl = get_impl_function_name(func_name)
    func.args[begin].args[begin].args[begin] = func_name_impl

    # Return a wrapper around the function that encapsulates the original 
    # implementation
    return esc(quote
        $(func)

        @noinline function $func_name($(args...))::$ret_type
            return $(func_name_impl)($(args...))
        end
    end)
end

macro rewritetarget_ef(func::Expr)
    if func.args[begin].args[begin] isa Symbol
        return error("Please add a return type to the function")
    end

    # Full signature of function including name and return type
    signature = func.args[begin]
    # Signature of function without return type
    signature_noret = signature.args[begin]

    func_name = signature_noret.args[begin]
    args = signature_noret.args[2:end]
    ret_type = signature.args[2]

    # Change the name of the implementation function
    func_name_impl = get_impl_function_name(func_name)
    func.args[begin].args[begin].args[begin] = func_name_impl

    # Return a wrapper around the function that encapsulates the original 
    # implementation
    return esc(quote
        $(func)

        @noinline Base.@assume_effects :effect_free function $func_name($(args...))::$ret_type
            return $(func_name_impl)($(args...))
        end
    end)
end
